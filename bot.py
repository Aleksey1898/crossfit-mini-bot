from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, CallbackQueryHandler, ContextTypes
import random

# --- –ë–∞–∑–∞ —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π ---
exercises = {
    "–ü—Ä–∏—Å–µ–¥–∞–Ω–∏—è": {"reps": 40},
    "–û—Ç–∂–∏–º–∞–Ω–∏—è": {"reps": 25},
    "–ü–ª–∞–Ω–∫–∞": {"time": 90},
    "–ë–µ—Ä–ø–∏": {"reps": 15},
    "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è": {"reps": 50},
    "–í—ã–ø–∞–¥—ã": {"reps": 30},
    "–ü—Ä—ã–∂–∫–∏ –Ω–∞ –º–µ—Å—Ç–µ": {"reps": 30},
    "–ê–ª—å–ø–∏–Ω–∏—Å—Ç": {"reps": 30},
    "–ü–æ–¥—ä—ë–º –Ω–æ–≥": {"reps": 25},
    "–°—É–ø–µ—Ä–º–µ–Ω": {"reps": 40},
    "–í—ã–ø–∞–¥—ã –Ω–∞–∑–∞–¥": {"reps": 20},
    "V-—Å–∫–ª–∞–¥–∫–∏ –∫—Ä–µ—Å—Ç–æ–º": {"reps": 30},
    "V-—Å–∫–ª–∞–¥–∫–∏ —Å—Ç—Ä–æ–≥–∏–µ": {"reps": 30},
    "–ü—Ä–µ—Å—Å": {"reps": 30},
    "–û—Ç–∂–∏–º–∞–Ω–∏—è —Å –æ—Ç—Ä—ã–≤–æ–º —Ä—É–∫": {"reps": 30},
    "–°–∫—Ä—É—á–∏–≤–∞–Ω–∏—è —Å –≤–µ—Å–æ–º": {"reps": 30},
    "–ü–ª–∞–Ω–∫–∞ —Å—Ç—É–ª—å—á–∏–∫": {"time": 90},
    "–ü–ª–∞–Ω–∫–∞ –±–æ–∫–æ–≤–∞—è": {"time": 90}
}

# --- –°–ª–æ–∂–Ω–æ—Å—Ç–∏ ---
def scale_difficulty(data, level):
    if level == "easy":
        reps = int(data.get("reps", 0) * 0.75)
        time = int(data.get("time", 0) * 0.75)
    elif level == "hard":
        reps = int(data.get("reps", 0) * 1.25)
        time = int(data.get("time", 0) * 1.25)
    else:
        reps = data.get("reps")
        time = data.get("time")
    return reps, time

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏ ---
def generate_game(level):
    chosen = random.sample(list(exercises.keys()), 3)
    result = []
    for ex in chosen:
        reps, time = scale_difficulty(exercises[ex], level)
        if reps:
            result.append(f"{ex}: {reps} –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π")
        elif time:
            min = time // 60
            sec = time % 60
            t = f"{min} –º–∏–Ω" if sec == 0 else f"{min} –º–∏–Ω {sec} —Å–µ–∫"
            result.append(f"{ex}: {t}")
    return result

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    buttons = [
        [InlineKeyboardButton("–õ—ë–≥–∫–∏–π", callback_data="easy")],
        [InlineKeyboardButton("–°—Ä–µ–¥–Ω–∏–π", callback_data="medium")],
        [InlineKeyboardButton("–°–ª–æ–∂–Ω—ã–π", callback_data="hard")],
    ]
    welcome_text = (
        "üèãÔ∏è –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ *CrossFit Mini Games*!\n"
        "–ó–¥–µ—Å—å —Ç–µ–±—è –∂–¥—ë—Ç –º–∏–Ω–∏-–∏—Å–ø—ã—Ç–∞–Ω–∏–µ –Ω–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å ‚Äî 3 —Å–ª—É—á–∞–π–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏—è —Å –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–π –¥–æ–∑–∏—Ä–æ–≤–∫–æ–π.\n\n"
        "üéØ –†–∞–∑ —Ç—ã —É–∂–µ –∑–¥–µ—Å—å ‚Äî —Å—á–∏—Ç–∞–π, —Ç—ã –Ω–∞ –ø–æ–ª–ø—É—Ç–∏ –∫ —É—Å–ø–µ—Ö—É. –û—Å—Ç–∞–ª–æ—Å—å —Ç–æ–ª—å–∫–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üòâ\n\n"
        "–í—ã–±–µ—Ä–∏ —É—Ä–æ–≤–µ–Ω—å –∏ –≤–ª–µ—Ç–∞–π –≤ –∏–≥—Ä—É! üî•"
    )
    await update.message.reply_text(welcome_text, reply_markup=InlineKeyboardMarkup(buttons), parse_mode="Markdown")

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    level = query.data
    workout = generate_game(level)
    text = "\n".join([f"‚Ä¢ {line}" for line in workout])
    buttons = [
        [InlineKeyboardButton("üîÅ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –µ—â—ë", callback_data=level)]
    ]
    await query.edit_message_text(f"–¢–≤–æ—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞:\n\n{text}", reply_markup=InlineKeyboardMarkup(buttons))

# --- –ó–∞–ø—É—Å–∫ ---
TOKEN = "8027740837:AAFlypGWqBNgyQRhMK7nqSQCO9pGIhHLzMA"

app = ApplicationBuilder().token(TOKEN).build()
app.add_handler(CommandHandler("start", start))
app.add_handler(CallbackQueryHandler(button_handler))

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
app.run_polling()
